@using SolBlog.Services.Interfaces;
@using SolBlog.Services;
@using SolBlog.Enums;
@model SolBlog.Models.BlogPost
@inject IImageService _ImageService;
@inject IBlogService _BlogService;


@{
    Layout = "/Views/Shared/_CreatePartial.cshtml";
    ViewData["Title"] = "Create";
}


 <style>
/*      .ck-editor__editable_inline {
        min-height: 600px;
    } */

    input.largerCheckbox {
        width: 30px;
        height: 30px;
    }

    label.form-check-label {
        font-size: 22px;
    }
</style> 
<div class="post-single-wrapper axil-section-gap">
    <div class="container text-center">
        <h1 class="text-light">Create</h1>
        <h4 class="text-light">BlogPost</h4>
    </div>
    <hr />

    <form asp-action="Create" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="row">
            <div class="col-12 col-lg-4 ">
                <div class="transparent-white-background mb-3 border-1 border-rounded p-2">
                    <div class="form-group ">
                        <label asp-for="ImageFile" class="control-label text-dark ">Blog Post Image</label>
                        <img class="img-fluid border rounded-3 mb-2" style="max-height: 350px;" src="@_ImageService.ConvertByteArrayToFile(Model?.ImageData!,Model?.ImageType!,DefaultImages.BlogPostImage)" id="blogImage">
                        <input asp-for="ImageFile" type="file" class="form-control mt-3 pt-2" accept=".png,.jpg,.jpeg,.gif"
                               onchange="document.getElementById('blogImage').src = window.URL.createObjectURL(this.files[0])" />
                    </div>
                    <div class="form-group">
                        <label asp-for="Title" class="control-label text-black"></label>
                        <input asp-for="Title" class="form-control" />
                        <span asp-validation-for="Title" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Abstract" class="control-label text-black"></label>
                        <textarea asp-for="Abstract" class="form-control" rows="1"></textarea>
                        <span asp-validation-for="Abstract" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="CategoryId" class="control-label text-black">Category</label>
                        <select asp-for="CategoryId" class="form-control" asp-items="ViewBag.CategoryId"></select>
                    </div>
                </div>

            </div>
            <div class="col-12 col-lg-8 transparent-white-background">
                <div class="form-group">
                    <label asp-for="Content" class="control-label"></label>
                    <textarea asp-for="Content" id="content" class="form-control"></textarea>
                    <span asp-validation-for="Content" class="text-danger"></span>
                </div>
                <div class="form-group" id="tagContainer">
                    <label asp-for="Tags" class="text-black" ></label>
                    <input class="form-control" type="text" id="tagInput" name="StringTags" autocomplete="off" />
                    <div class="tagcloud axil-single-widget mt-2" style="display: none;">
                        <!-- tags go here -->
                        @foreach (Tag tag in await _BlogService.GetTagsAsync())
                        {
                            <a class="text-black" role="button">@tag.Name</a>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group d-flex justify-content-end ">
            <div class="transparent-white-background mt-3 p-3 border-1 border-rounded">
                <label class="form-check-label me-4 text-black" asp-for="IsPublished">Publish?</label>
                <input class="largerCheckbox me-8" type="checkbox" asp-for="IsPublished" />
                <span asp-validation-for="IsPublished" class="text-danger"></span>

            </div>
        </div>
        <div class="form-group d-flex justify-content-end">
            <input type="submit" value="Create" class="btn login-buttons" />
        </div>
    </form>
    <div class="form-group mt-5 start-0">
        <a asp-action="Index">Back</a>
    </div>

</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        tinymce.init({
            selector: 'textarea#content',
            plugins: ' mentions anchor  charmap codesample emoticons image link lists media searchreplace table visualblocks wordcount checklist mediaembed casechange export formatpainter pageembed permanentpen footnotes advtemplate advtable advcode editimage tableofcontents mergetags powerpaste tinymcespellchecker autocorrect a11ychecker typography inlinecss',
            toolbar: 'undo redo | blocks fontfamily fontsize | bold italic underline strikethrough | link image media table mergetags | align lineheight | tinycomments | checklist numlist bullist indent outdent | emoticons charmap | removeformat',
            tinycomments_mode: 'embedded',
            tinycomments_author: 'Author name',
            mergetags_list: [
                { value: 'First.Name', title: 'First Name' },
                { value: 'Email', title: 'Email' },
            ],
            ai_request: (request, respondWith) => respondWith.string(() => Promise.reject("See docs to implement AI Assistant")),
        });
    </script>
@*     <!--CK Editor-->
    <script src="https://cdn.ckeditor.com/ckeditor5/37.1.0/classic/ckeditor.js"></script>
    <script>
        ClassicEditor
            .create(document.querySelector('.editor'), {
                licenseKey: '',
            })
            .then(editor => {
                window.editor = editor;
            });
    </script> *@

    <script>
        // override the jQuery ":contains" selector to make it case insensitive
        jQuery.expr[':'].contains = function (a, i, m) {
            return $(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
        };


        $(document).ready(function () {
            //add an event listener on the tag input to show the tagcloud

            $('#tagInput').focus(function () {
                $('.tagcloud').show(300);
            });

            // add an event listener to HIDE the tag cloud when im not in the tag input

            $('form * :not("#tagInput")').focus(function () {
                if ($('.tagcloud').is(':visible')) {
                    $('.tagcloud').hide(300);
                }
            });

            $('#tagInput').keyup(function () {
                //Get just the text from the input after the last comma
                let inputTags = $(this).val().split(',');
                let searchString = inputTags.pop().trim();
                //hide all tags that do not contain that text
                $('.tagcloud > a:not(:contains(' + searchString + '))').hide(300)
                //show all the tags that do not conatian that text
                $('.tagcloud > a:contains(' + searchString + ')').show(300)

                $('.disabledTag').removeClass('disabledTag')

                inputTags.forEach(tag => {

                    if (tag.trim == '') { return; }

                    let matchingTags = $('.tagcloud > a:contains(' + tag.trim() + ')');

                    matchingTags.each(function () {
                        if ($(this).text().trim().toLowerCase() == tag.trim().toLowerCase()) {
                            $(this).addClass('disabledTag');
                        }

                    });


                });
            });

            $('.tagcloud > a').click(function () {
                //if its disabled then do nothing
                if ($(this).hasClass('disabledTag')) {
                    $('#tagInput').focus();
                    return;
                }

                //get the name of the tag that was clicked
                let tagName = $(this).text();
                //get the text curently in the tag input
                //split it up by the commas
                let tags = $('#tagInput').val().split(',');
                //remove the last element
                tags.pop();
                //replace it with the tag that was clicked
                tags.push(tagName);
                //change the text in the input
                let tagsAsString = tags.map(t => t.trim()).join(', ') + ', ';
                $('#tagInput').val(tagsAsString);

                $('#tagInput').focus();
                $('#tagInput').keyup();
            });

        });

    </script>

}